#!/bin/sh

set -e

HELP=0
DEBUG=0
DOSHELL=0
P4PWD=`pwd`
P4ROOT=$P4PWD/depot
KEEP=true

while getopts "k:dr:s" OPT ; do
   case "$OPT" in
      d)
         DEBUG=1
         ;;
      k)
         KEEP=$OPTARG
         ;;
      r)
         P4ROOT=$OPTARG
         ;;
      s)
         DOSHELL=1
         ;;
      \?)
         HELP=1
         break
         ;;
   esac
done

shift $(($OPTIND-1))

if [ $HELP -ne 0 ] ; then
   echo "Usage: $0 [-dkrs]"
   exit 1
fi

if [ -n "$TESTDIR" ] ; then
   "$TESTDIR/hghave" p4 || exit 80
fi

# setup
export P4ROOT
P4AUDIT=$P4ROOT/audit; export P4AUDIT
P4JOURNAL=$P4ROOT/journal; export P4JOURNAL
P4LOG=$P4ROOT/log; export P4LOG

if [ -z "$HGPORT" ] ; then
   HGPORT=16661
fi
P4PORT=localhost:$HGPORT; export P4PORT
P4DEBUG=$DEBUG; export P4DEBUG
P4CLIENT=hg-p4-import; export P4CLIENT
DEPOTPATH=//depot/test-mercurial-push
unset P4CONFIG
unset P4DIFF
unset P4EDITOR
unset P4PASSWD
unset P4USER

if [ -z "$HGRCPATH" ] ; then
   HGRCPATH=$P4PWD/.hgrc ; export HGRCPATH
fi

cat <<EOF >$HGRCPATH
[ui]
username=perfarce

[paths]
default = p4://$P4PORT/$P4CLIENT

[extensions]
convert=
graphlog=
perfarce=$P4PWD/perfarce.py

[perfarce]
keep = $KEEP
EOF

echo % create p4 depot

if [ $DEBUG -ne 0 ] ; then
    HGDEBUG=--debug
    filter() { 
        cat
    }
else
    filter() { 
        sed -r -e 's,[A-Z][a-z][a-z] [A-Z][a-z][a-z] [0-9][0-9] [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4} \+[0-9]{4},DATE,' \
               -e 's,[0-9]{4}/[0-9]{2}/[0-9]{2},DATE,' \
               -e 's,[0-9]{2}:[0-9]{2}:[0-9]{2},TIME,' \
               -e 's/[a-z]+@/USER@/' \
               -e 's/[0-9a-f]{40}/HGID40/g' \
               -e 's/[0-9a-f]{12}/HGID12/g' \
               -e 's!'$P4PWD'!P4PWD!g'
    }
fi

DATA=0
data() {
   echo $DATA
   DATA=$((DATA+1))
}

rm -fr $P4ROOT $P4PWD/src $P4PWD/dst $P4PWD/dst2 $P4PWD/new || true

echo % start the p4 server
[ ! -d $P4ROOT ] && mkdir $P4ROOT
p4d -f -J off >$P4ROOT/stdout 2>$P4ROOT/stderr &

export DOSHELL
cleanup() {
    if [ $DOSHELL -ne 0 ] ; then
        echo % run bash
        bash
    fi
    echo % stop the p4 server
    p4 admin stop
}
trap cleanup EXIT

# wait for the server to initialize
while ! p4 ; do
   sleep 1
done >/dev/null 2>/dev/null

echo % create a client spec
mkdir src
cd src

p4 client -o | sed '/^View:/,$ d' >p4client-$$
echo View: >>p4client-$$
echo " $DEPOTPATH/... //$P4CLIENT/..." >>p4client-$$
p4 client -i <p4client-$$
rm p4client-$$

echo % populate the depot
data > a
mkdir b
data > b/c
p4 add a b/c
p4 submit -d initial
p4 tag -l change-one ...

echo % change some files
p4 edit a
data >> a
p4 submit -d "p4 change a"

p4 edit b/c
data >> b/c
p4 submit -d "p4 change b/c"

data >>b/d
p4 add b/d
p4 submit -d "p4 add b/d"
p4 tag -l change-four ...

p4 delete b/c
p4 submit -d "p4 delete b/c"

cd ..

echo % convert

hg $HGDEBUG convert -s p4 $DEPOTPATH/... dst

echo % now work in hg
cd dst
hg $HGDEBUG up

check_contents() {
   hg glog --template '{rev} "{desc|firstline}" files: {files}\n' | filter
   md5sum $(hg manifest | grep -v .hgtags)
}
check_contents

echo % nothing incoming
hg $HGDEBUG incoming

echo % nothing outgoing
hg $HGDEBUG outgoing

echo % change some files in hg
data >> a
hg $HGDEBUG commit -m "hg change a"

data >> b/e
hg $HGDEBUG add b/e
hg $HGDEBUG ci -m "hg add b/e"

data >>b/d
hg $HGDEBUG commit -m "hg change b/d"

echo % id
hg $HGDEBUG p4identify | filter

echo % outgoing
hg $HGDEBUG outgoing | filter

echo % skip a changelist
p4 change -o | sed -r 's/<.+>/test/' >change.$$
p4 change -d $(p4 change -i <change.$$ | awk '/created/ { print $2 }')
rm change.$$

echo % push
hg $HGDEBUG push
echo % p4pending
hg $HGDEBUG p4pending | filter

echo % pending
hg $HGDEBUG p4pending | filter

echo % submit
hg $HGDEBUG p4submit -a
echo % echo % p4pending
hg $HGDEBUG p4pending | filter

echo % pending
hg $HGDEBUG p4pending | filter

echo % outgoing
hg $HGDEBUG outgoing | filter

echo % p4 results
cd ../src
p4 changes       | filter
p4 describe -s 7 | filter

p4 tag -l change-seven ...

cd ../dst

echo % incoming
hg $HGDEBUG incoming | filter

echo % pull
hg $HGDEBUG pull --update
check_contents

echo % push submit
data >a
data >c
hg add c
hg ci -m "ac" a c
hg $HGDEBUG push --submit

echo % echo % p4pending
hg $HGDEBUG p4pending | filter

echo % hg tag
hg $HGDEBUG pull --update
hg tag -r 5 tag-created-in-hg

hg $HGDEBUG push --submit

echo % copy files
hg cp a aa
hg $HGDEBUG commit -m "hg copy a"

hg $HGDEBUG push -r tip --submit

echo % move files
hg mv c cc
hg $HGDEBUG commit -m "hg move c"

hg $HGDEBUG push -r tip  --submit

echo % move dir
hg mv b bb
hg $HGDEBUG commit -m "hg move b"

hg $HGDEBUG push -r tip  --submit

SERVER=$(p4 info|sed -r -e '/Server version/!d' -e 's,[^/]+/[^.]+/([^/]+)/.+$,\1,' -e 's/\..$//')
if [ $SERVER -ge 2009 ] ; then
    cd ../src
    p4 sync | filter

    echo % new style move
    data >f
    p4 add f
    p4 submit -d new-f
    
    p4 edit f
    p4 move f g
    p4 submit -d move-f-to-g

    cd ../dst
    hg $HGDEBUG pull --update
    check_contents
fi

if [ $SERVER -ge 2005 ] ; then
    echo % overlay mappings
    cd ../src

    p4 sync | filter
    mkdir h
    data > h/j
    p4 add h/j
    p4 submit -d "p4 add h/j"

    p4 client -o >p4client-$$
    echo " -$DEPOTPATH/h/... //$P4CLIENT/h/..." >>p4client-$$
    echo " +$DEPOTPATH/h/... //$P4CLIENT/..." >>p4client-$$
    p4 client -i <p4client-$$

    p4 sync -f | filter

    cd ../dst
    hg $HGDEBUG pull --update
    check_contents
fi

echo % clone
cd ..
hg clone p4://$P4PORT/$P4CLIENT dst2

cd dst2
hg $HGDEBUG up

check_contents

# EOF
